    public  verifyEmail= async(request: IUserServices.IUserVerifyRequest)
    :Promise<IUserServices.IUserVerifyResponse> => {
      const response: IUserServices.IUserVerifyResponse = {
        status: STATUS_CODES.UNKNOWN_CODE,
        email: "",
        otp: undefined
      }
   
  
      // const schema = Joi.object().keys({
      //   email: Joi.string().email().required(),
      //   //otp: Joi.number().min(4).max(6).required(),
      // })
      //const params = schema.validate(request);
      // if (params.error) {
      //   console.error(params.error);
      // }
      const extUser = await this.userStore.findOneData({ email: request.email });
      //console.log(extUser,"extUser serivce");
      if(!extUser)
      {
        //throw new Error("Email donesnot exist");
        const errorMsg = ErrorMessageEnum.EmailInvalid;
        response.status = STATUS_CODES.BAD_REQUEST;
        response.error = toError(errorMsg);
        return response;
      }
      // if (!extUser) {
      //   throw new Error("Email donesnot exist");
      // }
      //check  email is verified then throw error
      //console.log(extUser.emailVerified,"Email allready Verified service");
      
      if (extUser.emailVerified == 1) {
        //throw new Error("Email allready Verified");
        const errorMsg = ErrorMessageEnum.Email_Allready_Verified;
        response.status = STATUS_CODES.BAD_REQUEST;
        response.error = toError(errorMsg);
        return response;
      }
      const userOTP = request.otp;
     // console.log(userOTP,"service userOTP");
      
      // compaire otp for input and existing otp in db
      if (extUser.otp !== userOTP) {
        // throw new Error("invalid Otp");
        const errorMsg = ErrorMessageEnum.Invalid_Otp;
        response.status = STATUS_CODES.BAD_REQUEST;
        response.error = toError(errorMsg);
        return response;
      }

      let updateVerifyCheck:IUSER
      try{
         updateVerifyCheck = await this.userStore.findOneDataAndUpdate(
          { email: request?.email },
          { emailVerified: 1 }
        );
       // response.status = STATUS_CODES.OK;
        //console.log(updateVerifyCheck,"updateVerifyCheck serivce");

      }catch(e){
        console.error(e);
        response.status = STATUS_CODES.INTERNAL_SERVER_ERROR;
        response.error = toError(e.message);
        return response;
      }
      response.status = STATUS_CODES.OK;
      response.user = updateVerifyCheck;
      
      console.log(response,"test response data");
      
      
      return response
      // return {
      //   emailVerified: "email Verified sucessfully",
      //   //updateVerifyCheck,
      //   // status:200
      // };
   
  };